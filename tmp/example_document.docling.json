{
  "schema_name": "DoclingDocument",
  "version": "1.5.0",
  "name": "example_document",
  "origin": {
    "mimetype": "text/html",
    "binary_hash": 1419818444595678027,
    "filename": "example_document.html"
  },
  "furniture": {
    "self_ref": "#/furniture",
    "children": [],
    "content_layer": "furniture",
    "name": "_root_",
    "label": "unspecified"
  },
  "body": {
    "self_ref": "#/body",
    "children": [
      {
        "$ref": "#/texts/0"
      },
      {
        "$ref": "#/texts/1"
      },
      {
        "$ref": "#/texts/2"
      },
      {
        "$ref": "#/groups/0"
      },
      {
        "$ref": "#/texts/3"
      },
      {
        "$ref": "#/groups/1"
      },
      {
        "$ref": "#/texts/12"
      },
      {
        "$ref": "#/groups/2"
      },
      {
        "$ref": "#/texts/18"
      },
      {
        "$ref": "#/texts/19"
      },
      {
        "$ref": "#/texts/21"
      },
      {
        "$ref": "#/texts/31"
      }
    ],
    "content_layer": "body",
    "name": "_root_",
    "label": "unspecified"
  },
  "groups": [
    {
      "self_ref": "#/groups/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/pictures/0"
        },
        {
          "$ref": "#/texts/4"
        },
        {
          "$ref": "#/texts/5"
        },
        {
          "$ref": "#/texts/6"
        },
        {
          "$ref": "#/texts/7"
        },
        {
          "$ref": "#/texts/8"
        }
      ],
      "content_layer": "furniture",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/9"
        },
        {
          "$ref": "#/texts/10"
        },
        {
          "$ref": "#/texts/11"
        }
      ],
      "content_layer": "furniture",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/13"
        },
        {
          "$ref": "#/texts/14"
        },
        {
          "$ref": "#/texts/15"
        },
        {
          "$ref": "#/texts/16"
        },
        {
          "$ref": "#/texts/17"
        }
      ],
      "content_layer": "furniture",
      "name": "ordered list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/3",
      "parent": {
        "$ref": "#/texts/21"
      },
      "children": [
        {
          "$ref": "#/texts/22"
        },
        {
          "$ref": "#/texts/23"
        },
        {
          "$ref": "#/texts/24"
        },
        {
          "$ref": "#/texts/25"
        },
        {
          "$ref": "#/texts/26"
        },
        {
          "$ref": "#/texts/27"
        },
        {
          "$ref": "#/texts/28"
        },
        {
          "$ref": "#/texts/29"
        }
      ],
      "content_layer": "body",
      "name": "ordered list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/4",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/33"
        }
      ],
      "content_layer": "body",
      "name": "header-2",
      "label": "section"
    },
    {
      "self_ref": "#/groups/5",
      "parent": {
        "$ref": "#/texts/39"
      },
      "children": [
        {
          "$ref": "#/texts/44"
        },
        {
          "$ref": "#/texts/45"
        }
      ],
      "content_layer": "body",
      "name": "ordered list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/6",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [
        {
          "$ref": "#/texts/51"
        },
        {
          "$ref": "#/texts/52"
        },
        {
          "$ref": "#/texts/53"
        },
        {
          "$ref": "#/texts/54"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/7",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [
        {
          "$ref": "#/texts/57"
        },
        {
          "$ref": "#/texts/58"
        },
        {
          "$ref": "#/texts/59"
        },
        {
          "$ref": "#/texts/60"
        },
        {
          "$ref": "#/texts/61"
        },
        {
          "$ref": "#/texts/62"
        },
        {
          "$ref": "#/texts/63"
        },
        {
          "$ref": "#/texts/64"
        }
      ],
      "content_layer": "body",
      "name": "ordered list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/8",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [
        {
          "$ref": "#/texts/67"
        },
        {
          "$ref": "#/texts/68"
        },
        {
          "$ref": "#/texts/69"
        },
        {
          "$ref": "#/texts/70"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/9",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [
        {
          "$ref": "#/texts/73"
        },
        {
          "$ref": "#/texts/74"
        },
        {
          "$ref": "#/texts/75"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/10",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [
        {
          "$ref": "#/texts/77"
        },
        {
          "$ref": "#/texts/78"
        },
        {
          "$ref": "#/texts/79"
        },
        {
          "$ref": "#/texts/80"
        }
      ],
      "content_layer": "body",
      "name": "ordered list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/11",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [
        {
          "$ref": "#/texts/90"
        },
        {
          "$ref": "#/texts/91"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/12",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [
        {
          "$ref": "#/texts/93"
        },
        {
          "$ref": "#/texts/94"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/13",
      "parent": {
        "$ref": "#/texts/106"
      },
      "children": [
        {
          "$ref": "#/texts/107"
        },
        {
          "$ref": "#/texts/108"
        },
        {
          "$ref": "#/texts/109"
        },
        {
          "$ref": "#/texts/110"
        },
        {
          "$ref": "#/texts/111"
        },
        {
          "$ref": "#/texts/112"
        },
        {
          "$ref": "#/texts/113"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/14",
      "parent": {
        "$ref": "#/texts/114"
      },
      "children": [
        {
          "$ref": "#/texts/115"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/15",
      "parent": {
        "$ref": "#/texts/116"
      },
      "children": [
        {
          "$ref": "#/texts/117"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/16",
      "parent": {
        "$ref": "#/texts/118"
      },
      "children": [
        {
          "$ref": "#/texts/119"
        },
        {
          "$ref": "#/texts/120"
        },
        {
          "$ref": "#/texts/121"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/17",
      "parent": {
        "$ref": "#/texts/122"
      },
      "children": [
        {
          "$ref": "#/texts/123"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/18",
      "parent": {
        "$ref": "#/texts/124"
      },
      "children": [
        {
          "$ref": "#/texts/125"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/19",
      "parent": {
        "$ref": "#/texts/126"
      },
      "children": [
        {
          "$ref": "#/texts/127"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/20",
      "parent": {
        "$ref": "#/texts/143"
      },
      "children": [
        {
          "$ref": "#/texts/144"
        },
        {
          "$ref": "#/texts/145"
        },
        {
          "$ref": "#/texts/146"
        },
        {
          "$ref": "#/texts/147"
        },
        {
          "$ref": "#/texts/148"
        },
        {
          "$ref": "#/texts/149"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/21",
      "parent": {
        "$ref": "#/texts/150"
      },
      "children": [
        {
          "$ref": "#/texts/151"
        },
        {
          "$ref": "#/texts/152"
        },
        {
          "$ref": "#/texts/153"
        },
        {
          "$ref": "#/texts/154"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/22",
      "parent": {
        "$ref": "#/texts/155"
      },
      "children": [
        {
          "$ref": "#/texts/156"
        },
        {
          "$ref": "#/texts/157"
        },
        {
          "$ref": "#/texts/158"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/23",
      "parent": {
        "$ref": "#/texts/166"
      },
      "children": [
        {
          "$ref": "#/texts/167"
        },
        {
          "$ref": "#/texts/168"
        },
        {
          "$ref": "#/texts/169"
        },
        {
          "$ref": "#/texts/170"
        },
        {
          "$ref": "#/texts/171"
        },
        {
          "$ref": "#/texts/172"
        },
        {
          "$ref": "#/texts/173"
        },
        {
          "$ref": "#/texts/174"
        },
        {
          "$ref": "#/texts/175"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    },
    {
      "self_ref": "#/groups/24",
      "parent": {
        "$ref": "#/texts/177"
      },
      "children": [
        {
          "$ref": "#/texts/178"
        },
        {
          "$ref": "#/texts/179"
        },
        {
          "$ref": "#/texts/180"
        },
        {
          "$ref": "#/texts/181"
        }
      ],
      "content_layer": "body",
      "name": "list",
      "label": "list"
    }
  ],
  "texts": [
    {
      "self_ref": "#/texts/0",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "title",
      "prov": [],
      "orig": "Getting started | Red Hat AI Inference Server | 3.2 | Red Hat Documentation",
      "text": "Getting started | Red Hat AI Inference Server | 3.2 | Red Hat Documentation"
    },
    {
      "self_ref": "#/texts/1",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "text",
      "prov": [],
      "orig": "Skip to navigationSkip to content",
      "text": "Skip to navigationSkip to content"
    },
    {
      "self_ref": "#/texts/2",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "text",
      "prov": [],
      "orig": "Featured links",
      "text": "Featured links"
    },
    {
      "self_ref": "#/texts/3",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "caption",
      "prov": [],
      "orig": "Red Hat Summit",
      "text": "Red Hat Summit"
    },
    {
      "self_ref": "#/texts/4",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Support",
      "text": "Support",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/5",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Console",
      "text": "Console",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/6",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Developers",
      "text": "Developers",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/7",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Start a trial",
      "text": "Start a trial",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/8",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "All Red HatFor customersCustomer support Subscription management Support Cases Red Hat Ecosystem Catalog Find a partner For partnersPartner portal Partner support Become a partner Try, buy, & sellRed Hat Store Contact Sales Start a trial Learning resourcesTraining and certification Hybrid cloud learning hub Interactive labs Learning community Red Hat TV Architecture center Open source communitiesGlobal advocacy How we contribute",
      "text": "All Red HatFor customersCustomer support Subscription management Support Cases Red Hat Ecosystem Catalog Find a partner For partnersPartner portal Partner support Become a partner Try, buy, & sellRed Hat Store Contact Sales Start a trial Learning resourcesTraining and certification Hybrid cloud learning hub Interactive labs Learning community Red Hat TV Architecture center Open source communitiesGlobal advocacy How we contribute",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/9",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "AI",
      "text": "AI",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/10",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Learn",
      "text": "Learn",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/11",
      "parent": {
        "$ref": "#/groups/1"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Documentation",
      "text": "Documentation",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/12",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "text",
      "prov": [],
      "orig": "Red\u00a0Hat SummitSupportConsoleDevelopersStart a trialContactSelect your languageEnglishFran\u00e7ais\ud55c\uad6d\uc5b4\u65e5\u672c\u8a9e\u4e2d\u6587 (\u4e2d\u56fd)DeutschItalianoPortugu\u00easEspa\u00f1ol",
      "text": "Red Hat SummitSupportConsoleDevelopersStart a trialContactSelect your languageEnglishFran\u00e7ais\ud55c\uad6d\uc5b4\u65e5\u672c\u8a9e\u4e2d\u6587 (\u4e2d\u56fd)DeutschItalianoPortugu\u00easEspa\u00f1ol"
    },
    {
      "self_ref": "#/texts/13",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Home",
      "text": "Home",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/14",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Products",
      "text": "Products",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/15",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Red Hat AI Inference Server",
      "text": "Red Hat AI Inference Server",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/16",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "3.2",
      "text": "3.2",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/17",
      "parent": {
        "$ref": "#/groups/2"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "list_item",
      "prov": [],
      "orig": "Getting started",
      "text": "Getting started",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/18",
      "parent": {
        "$ref": "#/body"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "text",
      "prov": [],
      "orig": "Open Table of contentsOpen page settings",
      "text": "Open Table of contentsOpen page settings"
    },
    {
      "self_ref": "#/texts/19",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/20"
        }
      ],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Red Hat AI Inference Server",
      "text": "Red Hat AI Inference Server"
    },
    {
      "self_ref": "#/texts/20",
      "parent": {
        "$ref": "#/texts/19"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "FormatMulti-pageSingle-pageView full doc as PDF",
      "text": "FormatMulti-pageSingle-pageView full doc as PDF"
    },
    {
      "self_ref": "#/texts/21",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/groups/3"
        },
        {
          "$ref": "#/texts/30"
        }
      ],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Red Hat AI Inference Server",
      "text": "Red Hat AI Inference Server"
    },
    {
      "self_ref": "#/texts/22",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Getting started",
      "text": "Getting started",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/23",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Preface",
      "text": "Preface",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/24",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "1. About AI Inference Server",
      "text": "1. About AI Inference Server",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/25",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "2. Product and version compatibility",
      "text": "2. Product and version compatibility",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/26",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "3. Serving and inferencing with AI Inference Server",
      "text": "3. Serving and inferencing with AI Inference Server",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/27",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "4. Validating Red Hat AI Inference Server benefits using key metrics",
      "text": "4. Validating Red Hat AI Inference Server benefits using key metrics",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/28",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "5. TroubleshootingTroubleshooting [[5.1. Model loading errors ][5.2. Memory optimization ][5.3. Generated model response quality ][5.4. CUDA accelerator errors ][5.5. Networking errors ][5.6. Python multiprocessing errors ][5.7. GPU driver or device pass-through issues ]]",
      "text": "5. TroubleshootingTroubleshooting [[5.1. Model loading errors ][5.2. Memory optimization ][5.3. Generated model response quality ][5.4. CUDA accelerator errors ][5.5. Networking errors ][5.6. Python multiprocessing errors ][5.7. GPU driver or device pass-through issues ]]",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/29",
      "parent": {
        "$ref": "#/groups/3"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Legal Notice",
      "text": "Legal Notice",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/30",
      "parent": {
        "$ref": "#/texts/21"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "FormatMulti-pageSingle-pageView full doc as PDF",
      "text": "FormatMulti-pageSingle-pageView full doc as PDF"
    },
    {
      "self_ref": "#/texts/31",
      "parent": {
        "$ref": "#/body"
      },
      "children": [
        {
          "$ref": "#/texts/32"
        },
        {
          "$ref": "#/groups/4"
        },
        {
          "$ref": "#/texts/37"
        },
        {
          "$ref": "#/texts/39"
        },
        {
          "$ref": "#/texts/46"
        },
        {
          "$ref": "#/texts/48"
        },
        {
          "$ref": "#/texts/65"
        },
        {
          "$ref": "#/texts/95"
        },
        {
          "$ref": "#/texts/128"
        }
      ],
      "content_layer": "body",
      "label": "title",
      "prov": [],
      "orig": "Getting started",
      "text": "Getting started"
    },
    {
      "self_ref": "#/texts/32",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red\u00a0Hat AI Inference Server 3.2",
      "text": "Red Hat AI Inference Server 3.2"
    },
    {
      "self_ref": "#/texts/33",
      "parent": {
        "$ref": "#/groups/4"
      },
      "children": [
        {
          "$ref": "#/texts/34"
        },
        {
          "$ref": "#/texts/35"
        },
        {
          "$ref": "#/texts/36"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Getting started with Red\u00a0Hat AI Inference Server",
      "text": "Getting started with Red Hat AI Inference Server",
      "level": 2
    },
    {
      "self_ref": "#/texts/34",
      "parent": {
        "$ref": "#/texts/33"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red Hat AI Documentation TeamLegal Notice",
      "text": "Red Hat AI Documentation TeamLegal Notice"
    },
    {
      "self_ref": "#/texts/35",
      "parent": {
        "$ref": "#/texts/33"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Abstract",
      "text": "Abstract"
    },
    {
      "self_ref": "#/texts/36",
      "parent": {
        "$ref": "#/texts/33"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Learn how to work with Red\u00a0Hat AI Inference Server for model serving and inferencing.",
      "text": "Learn how to work with Red Hat AI Inference Server for model serving and inferencing."
    },
    {
      "self_ref": "#/texts/37",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/38"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Preface Copy link Link copied to clipboard!",
      "text": "Preface Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/38",
      "parent": {
        "$ref": "#/texts/37"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red\u00a0Hat AI Inference Server is a container image that optimizes serving and inferencing with LLMs. Using AI Inference Server, you can serve and inference models in a way that boosts their performance while reducing their costs.",
      "text": "Red Hat AI Inference Server is a container image that optimizes serving and inferencing with LLMs. Using AI Inference Server, you can serve and inference models in a way that boosts their performance while reducing their costs."
    },
    {
      "self_ref": "#/texts/39",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/40"
        },
        {
          "$ref": "#/texts/41"
        },
        {
          "$ref": "#/texts/42"
        },
        {
          "$ref": "#/texts/43"
        },
        {
          "$ref": "#/groups/5"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Chapter\u00a01.\u00a0About AI Inference Server Copy link Link copied to clipboard!",
      "text": "Chapter 1. About AI Inference Server Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/40",
      "parent": {
        "$ref": "#/texts/39"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "AI Inference Server provides enterprise-grade stability and security, building on upstream, open source software. AI Inference Server leverages the upstream vLLM project, which provides state-of-the-art inferencing features.",
      "text": "AI Inference Server provides enterprise-grade stability and security, building on upstream, open source software. AI Inference Server leverages the upstream vLLM project, which provides state-of-the-art inferencing features."
    },
    {
      "self_ref": "#/texts/41",
      "parent": {
        "$ref": "#/texts/39"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "For example, AI Inference Server uses continuous batching to process requests as they arrive instead of waiting for a full batch to be accumulated. It also uses tensor parallelism to distribute LLM workloads across multiple GPUs. These features provide reduced latency and higher throughput.",
      "text": "For example, AI Inference Server uses continuous batching to process requests as they arrive instead of waiting for a full batch to be accumulated. It also uses tensor parallelism to distribute LLM workloads across multiple GPUs. These features provide reduced latency and higher throughput."
    },
    {
      "self_ref": "#/texts/42",
      "parent": {
        "$ref": "#/texts/39"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "To reduce the cost of inferencing models, AI Inference Server uses paged attention. LLMs use a mechanism called attention to understand conversations with users. Normally, attention uses a significant amount of memory, much of which is wasted. Paged attention addresses this memory wastage by provisioning memory for LLMs similar to the way that virtual memory works for operating systems. This approach consumes less memory, which lowers costs.",
      "text": "To reduce the cost of inferencing models, AI Inference Server uses paged attention. LLMs use a mechanism called attention to understand conversations with users. Normally, attention uses a significant amount of memory, much of which is wasted. Paged attention addresses this memory wastage by provisioning memory for LLMs similar to the way that virtual memory works for operating systems. This approach consumes less memory, which lowers costs."
    },
    {
      "self_ref": "#/texts/43",
      "parent": {
        "$ref": "#/texts/39"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "To verify cost savings and performance gains with AI Inference Server, complete the following procedures:",
      "text": "To verify cost savings and performance gains with AI Inference Server, complete the following procedures:"
    },
    {
      "self_ref": "#/texts/44",
      "parent": {
        "$ref": "#/groups/5"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Serving and inferencing with AI Inference Server",
      "text": "Serving and inferencing with AI Inference Server",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/45",
      "parent": {
        "$ref": "#/groups/5"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Validating Red Hat AI Inference Server benefits using key metrics",
      "text": "Validating Red Hat AI Inference Server benefits using key metrics",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/46",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/47"
        },
        {
          "$ref": "#/tables/0"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Chapter\u00a02.\u00a0Product and version compatibility Copy link Link copied to clipboard!",
      "text": "Chapter 2. Product and version compatibility Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/47",
      "parent": {
        "$ref": "#/texts/46"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "The following table lists the supported product versions for Red\u00a0Hat AI Inference Server 3.2.",
      "text": "The following table lists the supported product versions for Red Hat AI Inference Server 3.2."
    },
    {
      "self_ref": "#/texts/48",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/49"
        },
        {
          "$ref": "#/texts/50"
        },
        {
          "$ref": "#/groups/6"
        },
        {
          "$ref": "#/texts/55"
        },
        {
          "$ref": "#/texts/56"
        },
        {
          "$ref": "#/groups/7"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Chapter\u00a03.\u00a0Serving and inferencing with AI Inference Server Copy link Link copied to clipboard!",
      "text": "Chapter 3. Serving and inferencing with AI Inference Server Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/49",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Serve and inference a large language model with Red\u00a0Hat AI Inference Server.",
      "text": "Serve and inference a large language model with Red Hat AI Inference Server."
    },
    {
      "self_ref": "#/texts/50",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Prerequisites",
      "text": "Prerequisites"
    },
    {
      "self_ref": "#/texts/51",
      "parent": {
        "$ref": "#/groups/6"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You have installed Podman or Docker",
      "text": "You have installed Podman or Docker",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/52",
      "parent": {
        "$ref": "#/groups/6"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You have access to a Linux server with NVIDIA or AMD GPUs and are logged in as a user with root privileges For NVIDIA GPUs: Install NVIDIA drivers Install the NVIDIA Container Toolkit If your system has multiple NVIDIA GPUs that use NVswitch, you must have root access to start Fabric Manager For AMD GPUs: Install ROCm software Verify that you can run ROCm containers",
      "text": "You have access to a Linux server with NVIDIA or AMD GPUs and are logged in as a user with root privileges For NVIDIA GPUs: Install NVIDIA drivers Install the NVIDIA Container Toolkit If your system has multiple NVIDIA GPUs that use NVswitch, you must have root access to start Fabric Manager For AMD GPUs: Install ROCm software Verify that you can run ROCm containers",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/53",
      "parent": {
        "$ref": "#/groups/6"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You have access to registry.redhat.io and have logged in",
      "text": "You have access to registry.redhat.io and have logged in",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/54",
      "parent": {
        "$ref": "#/groups/6"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You have a Hugging Face account and have generated a Hugging Face token",
      "text": "You have a Hugging Face account and have generated a Hugging Face token",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/55",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "For more information about supported quantization schemes for accelerators, see Supported hardware.",
      "text": "For more information about supported quantization schemes for accelerators, see Supported hardware."
    },
    {
      "self_ref": "#/texts/56",
      "parent": {
        "$ref": "#/texts/48"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Procedure",
      "text": "Procedure"
    },
    {
      "self_ref": "#/texts/57",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Identify the correct image for your infrastructure. EmptyEmptyAI AcceleratorAI Inference Server image NVIDIA CUDA registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 AMD ROCm registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0",
      "text": "Identify the correct image for your infrastructure. EmptyEmptyAI AcceleratorAI Inference Server image NVIDIA CUDA registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 AMD ROCm registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/58",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Open a terminal on your server host, and log in to registry.redhat.io: podman login registry.redhat.io $ podman login registry.redhat.io Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Open a terminal on your server host, and log in to registry.redhat.io: podman login registry.redhat.io $ podman login registry.redhat.io Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/59",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Pull the relevant image for your GPUs: To pull an NVIDIA CUDA image, run the following command: podman pull registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 $ podman pull registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 Copy to Clipboard Copied! Toggle word wrap Toggle overflow To pull an AMD ROCm image, run the following command: podman pull registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 $ podman pull registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Pull the relevant image for your GPUs: To pull an NVIDIA CUDA image, run the following command: podman pull registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 $ podman pull registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0-1754088865-hotfix-1 Copy to Clipboard Copied! Toggle word wrap Toggle overflow To pull an AMD ROCm image, run the following command: podman pull registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 $ podman pull registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/60",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "If your system has SELinux enabled, configure SELinux to allow device access: sudo setsebool -P container_use_devices 1 $ sudo setsebool -P container_use_devices 1 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "If your system has SELinux enabled, configure SELinux to allow device access: sudo setsebool -P container_use_devices 1 $ sudo setsebool -P container_use_devices 1 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/61",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Create a volume and mount it into the container. Adjust the container permissions so that the container can use it. mkdir -p rhaiis-cache $ mkdir -p rhaiis-cache Copy to Clipboard Copied! Toggle word wrap Toggle overflow chmod g+rwX rhaiis-cache $ chmod g+rwX rhaiis-cache Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Create a volume and mount it into the container. Adjust the container permissions so that the container can use it. mkdir -p rhaiis-cache $ mkdir -p rhaiis-cache Copy to Clipboard Copied! Toggle word wrap Toggle overflow chmod g+rwX rhaiis-cache $ chmod g+rwX rhaiis-cache Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/62",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Create or append your HF_TOKEN Hugging Face token to the private.env file. Source the private.env file. echo \"export HF_TOKEN=<your_HF_token>\" > private.env $ echo \"export HF_TOKEN=<your_HF_token>\" > private.env Copy to Clipboard Copied! Toggle word wrap Toggle overflow source private.env $ source private.env Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Create or append your HF_TOKEN Hugging Face token to the private.env file. Source the private.env file. echo \"export HF_TOKEN=<your_HF_token>\" > private.env $ echo \"export HF_TOKEN=<your_HF_token>\" > private.env Copy to Clipboard Copied! Toggle word wrap Toggle overflow source private.env $ source private.env Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/63",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Start the AI Inference Server container image. For NVIDIA CUDA accelerators: If the host system has multiple GPUs and uses NVSwitch, then start NVIDIA Fabric Manager. To detect if your system is using NVSwitch, first check if files are present in /proc/driver/nvidia-nvswitch/devices/, and then start NVIDIA Fabric Manager. Starting NVIDIA Fabric Manager requires root privileges. ls /proc/driver/nvidia-nvswitch/devices/ $ ls /proc/driver/nvidia-nvswitch/devices/ Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output 0000:0c:09.0 0000:0c:0a.0 0000:0c:0b.0 0000:0c:0c.0 0000:0c:0d.0 0000:0c:0e.0 0000:0c:09.0 0000:0c:0a.0 0000:0c:0b.0 0000:0c:0c.0 0000:0c:0d.0 0000:0c:0e.0 Copy to Clipboard Copied! Toggle word wrap Toggle overflow systemctl start nvidia-fabricmanager $ systemctl start nvidia-fabricmanager Copy to Clipboard Copied! Toggle word wrap Toggle overflow Important NVIDIA Fabric Manager is only required on systems with multiple GPUs that use NVswitch. For more information, see NVIDIA Server Architectures. Check that the Red Hat AI Inference Server container can access NVIDIA GPUs on the host by running the following command: podman run --rm -it \\ --security-opt=label=disable \\ --device nvidia.com/gpu=all \\ nvcr.io/nvidia/cuda:12.4.1-base-ubi9 \\ nvidia-smi $ podman run --rm -it \\ --security-opt=label=disable \\ --device nvidia.com/gpu=all \\ nvcr.io/nvidia/cuda:12.4.1-base-ubi9 \\ nvidia-smi Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ Copy to Clipboard Copied! Toggle word wrap Toggle overflow Start the container. podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4g -p 8000:8000 \\ --userns=keep-id:uid=1001 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache:Z \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 $ podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ 1 --shm-size=4g -p 8000:8000 \\ 2 --userns=keep-id:uid=1001 \\ 3 --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ 4 --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache:Z \\ 5 registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 6 Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 Required for systems where SELinux is enabled. --security-opt=label=disable prevents SELinux from relabeling files in the volume mount. If you choose not to use this argument, your container might not successfully run. 2 If you experience an issue with shared memory, increase --shm-size to 8GB. 3 Maps the host UID to the effective UID of the vLLM process in the container. You can also pass --user=0, but this less secure than the --userns option. Setting --user=0 runs vLLM as root inside the container. 4 Set and export HF_TOKEN with your Hugging Face API access token 5 Required for systems where SELinux is enabled. On Debian or Ubuntu operating systems, or when using Docker without SELinux, the :Z suffix is not available. 6 Set --tensor-parallel-size to match the number of GPUs when running the AI Inference Server container on multiple GPUs. For AMD ROCm accelerators: Use amd-smi static -a to verify that the container can access the host system GPUs: podman run -ti --rm --pull=newer \\ --security-opt=label=disable \\ --device=/dev/kfd --device=/dev/dri \\ --group-add keep-groups \\ --entrypoint=\"\" \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ amd-smi static -a $ podman run -ti --rm --pull=newer \\ --security-opt=label=disable \\ --device=/dev/kfd --device=/dev/dri \\ --group-add keep-groups \\ 1 --entrypoint=\"\" \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ amd-smi static -a Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 You must belong to both the video and render groups on AMD systems to use the GPUs. To access GPUs, you must pass the --group-add=keep-groups supplementary groups option into the container. Start the container: podman run --rm -it \\ --device /dev/kfd --device /dev/dri \\ --security-opt=label=disable \\ --group-add keep-groups \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 podman run --rm -it \\ --device /dev/kfd --device /dev/dri \\ --security-opt=label=disable \\ 1 --group-add keep-groups \\ --shm-size=4GB -p 8000:8000 \\ 2 --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 3 Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 --security-opt=label=disable prevents SELinux from relabeling files in the volume mount. If you choose not to use this argument, your container might not successfully run. 2 If you experience an issue with shared memory, increase --shm-size to 8GB. 3 Set --tensor-parallel-size to match the number of GPUs when running the AI Inference Server container on multiple GPUs.",
      "text": "Start the AI Inference Server container image. For NVIDIA CUDA accelerators: If the host system has multiple GPUs and uses NVSwitch, then start NVIDIA Fabric Manager. To detect if your system is using NVSwitch, first check if files are present in /proc/driver/nvidia-nvswitch/devices/, and then start NVIDIA Fabric Manager. Starting NVIDIA Fabric Manager requires root privileges. ls /proc/driver/nvidia-nvswitch/devices/ $ ls /proc/driver/nvidia-nvswitch/devices/ Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output 0000:0c:09.0 0000:0c:0a.0 0000:0c:0b.0 0000:0c:0c.0 0000:0c:0d.0 0000:0c:0e.0 0000:0c:09.0 0000:0c:0a.0 0000:0c:0b.0 0000:0c:0c.0 0000:0c:0d.0 0000:0c:0e.0 Copy to Clipboard Copied! Toggle word wrap Toggle overflow systemctl start nvidia-fabricmanager $ systemctl start nvidia-fabricmanager Copy to Clipboard Copied! Toggle word wrap Toggle overflow Important NVIDIA Fabric Manager is only required on systems with multiple GPUs that use NVswitch. For more information, see NVIDIA Server Architectures. Check that the Red Hat AI Inference Server container can access NVIDIA GPUs on the host by running the following command: podman run --rm -it \\ --security-opt=label=disable \\ --device nvidia.com/gpu=all \\ nvcr.io/nvidia/cuda:12.4.1-base-ubi9 \\ nvidia-smi $ podman run --rm -it \\ --security-opt=label=disable \\ --device nvidia.com/gpu=all \\ nvcr.io/nvidia/cuda:12.4.1-base-ubi9 \\ nvidia-smi Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ Copy to Clipboard Copied! Toggle word wrap Toggle overflow Start the container. podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4g -p 8000:8000 \\ --userns=keep-id:uid=1001 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache:Z \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 $ podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ 1 --shm-size=4g -p 8000:8000 \\ 2 --userns=keep-id:uid=1001 \\ 3 --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ 4 --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache:Z \\ 5 registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 6 Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 Required for systems where SELinux is enabled. --security-opt=label=disable prevents SELinux from relabeling files in the volume mount. If you choose not to use this argument, your container might not successfully run. 2 If you experience an issue with shared memory, increase --shm-size to 8GB. 3 Maps the host UID to the effective UID of the vLLM process in the container. You can also pass --user=0, but this less secure than the --userns option. Setting --user=0 runs vLLM as root inside the container. 4 Set and export HF_TOKEN with your Hugging Face API access token 5 Required for systems where SELinux is enabled. On Debian or Ubuntu operating systems, or when using Docker without SELinux, the :Z suffix is not available. 6 Set --tensor-parallel-size to match the number of GPUs when running the AI Inference Server container on multiple GPUs. For AMD ROCm accelerators: Use amd-smi static -a to verify that the container can access the host system GPUs: podman run -ti --rm --pull=newer \\ --security-opt=label=disable \\ --device=/dev/kfd --device=/dev/dri \\ --group-add keep-groups \\ --entrypoint=\"\" \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ amd-smi static -a $ podman run -ti --rm --pull=newer \\ --security-opt=label=disable \\ --device=/dev/kfd --device=/dev/dri \\ --group-add keep-groups \\ 1 --entrypoint=\"\" \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ amd-smi static -a Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 You must belong to both the video and render groups on AMD systems to use the GPUs. To access GPUs, you must pass the --group-add=keep-groups supplementary groups option into the container. Start the container: podman run --rm -it \\ --device /dev/kfd --device /dev/dri \\ --security-opt=label=disable \\ --group-add keep-groups \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 podman run --rm -it \\ --device /dev/kfd --device /dev/dri \\ --security-opt=label=disable \\ 1 --group-add keep-groups \\ --shm-size=4GB -p 8000:8000 \\ 2 --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-rocm-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 \\ --tensor-parallel-size 2 3 Copy to Clipboard Copied! Toggle word wrap Toggle overflow 1 --security-opt=label=disable prevents SELinux from relabeling files in the volume mount. If you choose not to use this argument, your container might not successfully run. 2 If you experience an issue with shared memory, increase --shm-size to 8GB. 3 Set --tensor-parallel-size to match the number of GPUs when running the AI Inference Server container on multiple GPUs.",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/64",
      "parent": {
        "$ref": "#/groups/7"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "In a separate tab in your terminal, make a request to your model with the API. curl -X POST -H \"Content-Type: application/json\" -d '{ \"prompt\": \"What is the capital of France?\", \"max_tokens\": 50 }' http://<your_server_ip>:8000/v1/completions | jq curl -X POST -H \"Content-Type: application/json\" -d '{ \"prompt\": \"What is the capital of France?\", \"max_tokens\": 50 }' http://<your_server_ip>:8000/v1/completions | jq Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output { \"id\": \"cmpl-b84aeda1d5a4485c9cb9ed4a13072fca\", \"object\": \"text_completion\", \"created\": 1746555421, \"model\": \"RedHatAI/Llama-3.2-1B-Instruct-FP8\", \"choices\": [ { \"index\": 0, \"text\": \" Paris.\\nThe capital of France is Paris.\", \"logprobs\": null, \"finish_reason\": \"stop\", \"stop_reason\": null, \"prompt_logprobs\": null } ], \"usage\": { \"prompt_tokens\": 8, \"total_tokens\": 18, \"completion_tokens\": 10, \"prompt_tokens_details\": null } } { \"id\": \"cmpl-b84aeda1d5a4485c9cb9ed4a13072fca\", \"object\": \"text_completion\", \"created\": 1746555421, \"model\": \"RedHatAI/Llama-3.2-1B-Instruct-FP8\", \"choices\": [ { \"index\": 0, \"text\": \" Paris.\\nThe capital of France is Paris.\", \"logprobs\": null, \"finish_reason\": \"stop\", \"stop_reason\": null, \"prompt_logprobs\": null } ], \"usage\": { \"prompt_tokens\": 8, \"total_tokens\": 18, \"completion_tokens\": 10, \"prompt_tokens_details\": null } } Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "In a separate tab in your terminal, make a request to your model with the API. curl -X POST -H \"Content-Type: application/json\" -d '{ \"prompt\": \"What is the capital of France?\", \"max_tokens\": 50 }' http://<your_server_ip>:8000/v1/completions | jq curl -X POST -H \"Content-Type: application/json\" -d '{ \"prompt\": \"What is the capital of France?\", \"max_tokens\": 50 }' http://<your_server_ip>:8000/v1/completions | jq Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output { \"id\": \"cmpl-b84aeda1d5a4485c9cb9ed4a13072fca\", \"object\": \"text_completion\", \"created\": 1746555421, \"model\": \"RedHatAI/Llama-3.2-1B-Instruct-FP8\", \"choices\": [ { \"index\": 0, \"text\": \" Paris.\\nThe capital of France is Paris.\", \"logprobs\": null, \"finish_reason\": \"stop\", \"stop_reason\": null, \"prompt_logprobs\": null } ], \"usage\": { \"prompt_tokens\": 8, \"total_tokens\": 18, \"completion_tokens\": 10, \"prompt_tokens_details\": null } } { \"id\": \"cmpl-b84aeda1d5a4485c9cb9ed4a13072fca\", \"object\": \"text_completion\", \"created\": 1746555421, \"model\": \"RedHatAI/Llama-3.2-1B-Instruct-FP8\", \"choices\": [ { \"index\": 0, \"text\": \" Paris.\\nThe capital of France is Paris.\", \"logprobs\": null, \"finish_reason\": \"stop\", \"stop_reason\": null, \"prompt_logprobs\": null } ], \"usage\": { \"prompt_tokens\": 8, \"total_tokens\": 18, \"completion_tokens\": 10, \"prompt_tokens_details\": null } } Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/65",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/66"
        },
        {
          "$ref": "#/groups/8"
        },
        {
          "$ref": "#/texts/71"
        },
        {
          "$ref": "#/texts/72"
        },
        {
          "$ref": "#/groups/9"
        },
        {
          "$ref": "#/texts/76"
        },
        {
          "$ref": "#/groups/10"
        },
        {
          "$ref": "#/texts/81"
        },
        {
          "$ref": "#/texts/82"
        },
        {
          "$ref": "#/texts/83"
        },
        {
          "$ref": "#/texts/84"
        },
        {
          "$ref": "#/texts/85"
        },
        {
          "$ref": "#/texts/86"
        },
        {
          "$ref": "#/texts/87"
        },
        {
          "$ref": "#/texts/88"
        },
        {
          "$ref": "#/texts/89"
        },
        {
          "$ref": "#/groups/11"
        },
        {
          "$ref": "#/texts/92"
        },
        {
          "$ref": "#/groups/12"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Chapter\u00a04.\u00a0Validating Red\u00a0Hat AI Inference Server benefits using key metrics Copy link Link copied to clipboard!",
      "text": "Chapter 4. Validating Red Hat AI Inference Server benefits using key metrics Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/66",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Use the following metrics to evaluate the performance of the LLM model being served with AI Inference Server:",
      "text": "Use the following metrics to evaluate the performance of the LLM model being served with AI Inference Server:"
    },
    {
      "self_ref": "#/texts/67",
      "parent": {
        "$ref": "#/groups/8"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Time to first token (TTFT): How long does it take for the model to provide the first token of its response?",
      "text": "Time to first token (TTFT): How long does it take for the model to provide the first token of its response?",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/68",
      "parent": {
        "$ref": "#/groups/8"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Time per output token (TPOT): How long does it take for the model to provide an output token to each user, who has sent a request?",
      "text": "Time per output token (TPOT): How long does it take for the model to provide an output token to each user, who has sent a request?",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/69",
      "parent": {
        "$ref": "#/groups/8"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Latency: How long does it take for the model to generate a complete response?",
      "text": "Latency: How long does it take for the model to generate a complete response?",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/70",
      "parent": {
        "$ref": "#/groups/8"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Throughput: How many output tokens can a model produce simultaneously, across all users and requests?",
      "text": "Throughput: How many output tokens can a model produce simultaneously, across all users and requests?",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/71",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Complete the procedure below to run a benchmark test that shows how AI Inference Server, and other inference servers, perform according to these metrics.",
      "text": "Complete the procedure below to run a benchmark test that shows how AI Inference Server, and other inference servers, perform according to these metrics."
    },
    {
      "self_ref": "#/texts/72",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Prerequisites",
      "text": "Prerequisites"
    },
    {
      "self_ref": "#/texts/73",
      "parent": {
        "$ref": "#/groups/9"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "AI Inference Server container image",
      "text": "AI Inference Server container image",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/74",
      "parent": {
        "$ref": "#/groups/9"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "GitHub account",
      "text": "GitHub account",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/75",
      "parent": {
        "$ref": "#/groups/9"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Python 3.9 or higher",
      "text": "Python 3.9 or higher",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/76",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Procedure",
      "text": "Procedure"
    },
    {
      "self_ref": "#/texts/77",
      "parent": {
        "$ref": "#/groups/10"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "On your host system, start an AI Inference Server container and serve a model. podman run --rm -it --device nvidia.com/gpu=all \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ --security-opt=label=disable \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 $ podman run --rm -it --device nvidia.com/gpu=all \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ --security-opt=label=disable \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "On your host system, start an AI Inference Server container and serve a model. podman run --rm -it --device nvidia.com/gpu=all \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ --security-opt=label=disable \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 $ podman run --rm -it --device nvidia.com/gpu=all \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ --security-opt=label=disable \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/78",
      "parent": {
        "$ref": "#/groups/10"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "In a separate terminal tab, install the benchmark tool dependencies. pip install vllm pandas datasets $ pip install vllm pandas datasets Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "In a separate terminal tab, install the benchmark tool dependencies. pip install vllm pandas datasets $ pip install vllm pandas datasets Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/79",
      "parent": {
        "$ref": "#/groups/10"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Clone the vLLM Git repository: git clone https://github.com/vllm-project/vllm.git $ git clone https://github.com/vllm-project/vllm.git Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Clone the vLLM Git repository: git clone https://github.com/vllm-project/vllm.git $ git clone https://github.com/vllm-project/vllm.git Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/80",
      "parent": {
        "$ref": "#/groups/10"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Run the ./vllm/benchmarks/benchmark_serving.py script. python vllm/benchmarks/benchmark_serving.py --backend vllm --model RedHatAI/Llama-3.2-1B-Instruct-FP8 --num-prompts 100 --dataset-name random --random-input 1024 --random-output 512 --port 8000 $ python vllm/benchmarks/benchmark_serving.py --backend vllm --model RedHatAI/Llama-3.2-1B-Instruct-FP8 --num-prompts 100 --dataset-name random --random-input 1024 --random-output 512 --port 8000 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Run the ./vllm/benchmarks/benchmark_serving.py script. python vllm/benchmarks/benchmark_serving.py --backend vllm --model RedHatAI/Llama-3.2-1B-Instruct-FP8 --num-prompts 100 --dataset-name random --random-input 1024 --random-output 512 --port 8000 $ python vllm/benchmarks/benchmark_serving.py --backend vllm --model RedHatAI/Llama-3.2-1B-Instruct-FP8 --num-prompts 100 --dataset-name random --random-input 1024 --random-output 512 --port 8000 Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": true,
      "marker": ""
    },
    {
      "self_ref": "#/texts/81",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Verification",
      "text": "Verification"
    },
    {
      "self_ref": "#/texts/82",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "The results show how AI Inference Server performs according to key server metrics:",
      "text": "The results show how AI Inference Server performs according to key server metrics:"
    },
    {
      "self_ref": "#/texts/83",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "============ Serving Benchmark Result ============\nSuccessful requests:                    100\nBenchmark duration (s):                 4.61\nTotal input tokens:                     102300\nTotal generated tokens:                 40493\nRequest throughput (req/s):             21.67\nOutput token throughput (tok/s):        8775.85\nTotal Token throughput (tok/s):         30946.83\n---------------Time to First Token----------------\nMean TTFT (ms):                         193.61\nMedian TTFT (ms):                       193.82\nP99 TTFT (ms):                          303.90\n-----Time per Output Token (excl. 1st token)------\nMean TPOT (ms):                         9.06\nMedian TPOT (ms):                       8.57\nP99 TPOT (ms):                          13.57\n---------------Inter-token Latency----------------\nMean ITL (ms):                          8.54\nMedian ITL (ms):                        8.49\nP99 ITL (ms):                           13.14\n==================================================",
      "text": "============ Serving Benchmark Result ============\nSuccessful requests:                    100\nBenchmark duration (s):                 4.61\nTotal input tokens:                     102300\nTotal generated tokens:                 40493\nRequest throughput (req/s):             21.67\nOutput token throughput (tok/s):        8775.85\nTotal Token throughput (tok/s):         30946.83\n---------------Time to First Token----------------\nMean TTFT (ms):                         193.61\nMedian TTFT (ms):                       193.82\nP99 TTFT (ms):                          303.90\n-----Time per Output Token (excl. 1st token)------\nMean TPOT (ms):                         9.06\nMedian TPOT (ms):                       8.57\nP99 TPOT (ms):                          13.57\n---------------Inter-token Latency----------------\nMean ITL (ms):                          8.54\nMedian ITL (ms):                        8.49\nP99 ITL (ms):                           13.14\n==================================================",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/84",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "============ Serving Benchmark Result ============\nSuccessful requests:                    100\nBenchmark duration (s):                 4.61\nTotal input tokens:                     102300\nTotal generated tokens:                 40493\nRequest throughput (req/s):             21.67\nOutput token throughput (tok/s):        8775.85\nTotal Token throughput (tok/s):         30946.83\n---------------Time to First Token----------------\nMean TTFT (ms):                         193.61\nMedian TTFT (ms):                       193.82\nP99 TTFT (ms):                          303.90\n-----Time per Output Token (excl. 1st token)------\nMean TPOT (ms):                         9.06\nMedian TPOT (ms):                       8.57\nP99 TPOT (ms):                          13.57\n---------------Inter-token Latency----------------\nMean ITL (ms):                          8.54\nMedian ITL (ms):                        8.49\nP99 ITL (ms):                           13.14\n==================================================",
      "text": "============ Serving Benchmark Result ============\nSuccessful requests:                    100\nBenchmark duration (s):                 4.61\nTotal input tokens:                     102300\nTotal generated tokens:                 40493\nRequest throughput (req/s):             21.67\nOutput token throughput (tok/s):        8775.85\nTotal Token throughput (tok/s):         30946.83\n---------------Time to First Token----------------\nMean TTFT (ms):                         193.61\nMedian TTFT (ms):                       193.82\nP99 TTFT (ms):                          303.90\n-----Time per Output Token (excl. 1st token)------\nMean TPOT (ms):                         9.06\nMedian TPOT (ms):                       8.57\nP99 TPOT (ms):                          13.57\n---------------Inter-token Latency----------------\nMean ITL (ms):                          8.54\nMedian ITL (ms):                        8.49\nP99 ITL (ms):                           13.14\n==================================================",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/85",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Copy to Clipboard",
      "text": "Copy to Clipboard"
    },
    {
      "self_ref": "#/texts/86",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Copied!",
      "text": "Copied!"
    },
    {
      "self_ref": "#/texts/87",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Toggle word wrap",
      "text": "Toggle word wrap"
    },
    {
      "self_ref": "#/texts/88",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Toggle overflow",
      "text": "Toggle overflow"
    },
    {
      "self_ref": "#/texts/89",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Try changing the parameters of this benchmark and running it again. Notice how vllm as a backend compares to other options. Throughput should be consistently higher, while latency should be lower.",
      "text": "Try changing the parameters of this benchmark and running it again. Notice how vllm as a backend compares to other options. Throughput should be consistently higher, while latency should be lower."
    },
    {
      "self_ref": "#/texts/90",
      "parent": {
        "$ref": "#/groups/11"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Other options for --backend are: tgi, lmdeploy, deepspeed-mii, openai, and openai-chat",
      "text": "Other options for --backend are: tgi, lmdeploy, deepspeed-mii, openai, and openai-chat",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/91",
      "parent": {
        "$ref": "#/groups/11"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Other options for --dataset-name are: sharegpt, burstgpt, sonnet, random, hf",
      "text": "Other options for --dataset-name are: sharegpt, burstgpt, sonnet, random, hf",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/92",
      "parent": {
        "$ref": "#/texts/65"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Additional resources",
      "text": "Additional resources"
    },
    {
      "self_ref": "#/texts/93",
      "parent": {
        "$ref": "#/groups/12"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "vLLM documentation",
      "text": "vLLM documentation",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/94",
      "parent": {
        "$ref": "#/groups/12"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "LLM Inference Performance Engineering: Best Practices, by Mosaic AI Research, which explains metrics such as throughput and latency",
      "text": "LLM Inference Performance Engineering: Best Practices, by Mosaic AI Research, which explains metrics such as throughput and latency",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/95",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/96"
        },
        {
          "$ref": "#/texts/97"
        },
        {
          "$ref": "#/texts/98"
        },
        {
          "$ref": "#/texts/99"
        },
        {
          "$ref": "#/texts/100"
        },
        {
          "$ref": "#/texts/101"
        },
        {
          "$ref": "#/texts/102"
        },
        {
          "$ref": "#/texts/103"
        },
        {
          "$ref": "#/texts/104"
        },
        {
          "$ref": "#/texts/105"
        },
        {
          "$ref": "#/texts/106"
        },
        {
          "$ref": "#/texts/114"
        },
        {
          "$ref": "#/texts/116"
        },
        {
          "$ref": "#/texts/118"
        },
        {
          "$ref": "#/texts/122"
        },
        {
          "$ref": "#/texts/124"
        },
        {
          "$ref": "#/texts/126"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Chapter\u00a05.\u00a0Troubleshooting Copy link Link copied to clipboard!",
      "text": "Chapter 5. Troubleshooting Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/96",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "The following troubleshooting information for Red\u00a0Hat AI Inference Server 3.2 describes common problems related to model loading, memory, model response quality, networking, and GPU drivers. Where available, workarounds for common issues are described.",
      "text": "The following troubleshooting information for Red Hat AI Inference Server 3.2 describes common problems related to model loading, memory, model response quality, networking, and GPU drivers. Where available, workarounds for common issues are described."
    },
    {
      "self_ref": "#/texts/97",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Most common issues in vLLM relate to installation, model loading, memory management, and GPU communication. Most problems can be resolved by using a correctly configured environment, ensuring compatible hardware and software versions, and following the recommended configuration practices.",
      "text": "Most common issues in vLLM relate to installation, model loading, memory management, and GPU communication. Most problems can be resolved by using a correctly configured environment, ensuring compatible hardware and software versions, and following the recommended configuration practices."
    },
    {
      "self_ref": "#/texts/98",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Important",
      "text": "Important"
    },
    {
      "self_ref": "#/texts/99",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "For persistent issues, export VLLM_LOGGING_LEVEL=DEBUG to enable debug logging and then check the logs.",
      "text": "For persistent issues, export VLLM_LOGGING_LEVEL=DEBUG to enable debug logging and then check the logs."
    },
    {
      "self_ref": "#/texts/100",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "export VLLM_LOGGING_LEVEL=DEBUG",
      "text": "export VLLM_LOGGING_LEVEL=DEBUG",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/101",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "code",
      "prov": [],
      "orig": "$exportVLLM_LOGGING_LEVEL=DEBUG",
      "text": "$exportVLLM_LOGGING_LEVEL=DEBUG",
      "captions": [],
      "references": [],
      "footnotes": [],
      "code_language": "unknown"
    },
    {
      "self_ref": "#/texts/102",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Copy to Clipboard",
      "text": "Copy to Clipboard"
    },
    {
      "self_ref": "#/texts/103",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Copied!",
      "text": "Copied!"
    },
    {
      "self_ref": "#/texts/104",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Toggle word wrap",
      "text": "Toggle word wrap"
    },
    {
      "self_ref": "#/texts/105",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Toggle overflow",
      "text": "Toggle overflow"
    },
    {
      "self_ref": "#/texts/106",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/13"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.1.\u00a0Model loading errors Copy link Link copied to clipboard!",
      "text": "5.1. Model loading errors Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/107",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "When you run the Red Hat AI Inference Server container image without specifying a user namespace, an unrecognized model error is returned. podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output ValueError: Unrecognized model in RedHatAI/Llama-3.2-1B-Instruct-FP8. Should have a model_type key in its config.json ValueError: Unrecognized model in RedHatAI/Llama-3.2-1B-Instruct-FP8. Should have a model_type key in its config.json Copy to Clipboard Copied! Toggle word wrap Toggle overflow To resolve this error, pass --userns=keep-id:uid=1001 as a Podman parameter to ensure that the container runs with the root user.",
      "text": "When you run the Red Hat AI Inference Server container image without specifying a user namespace, an unrecognized model error is returned. podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 podman run --rm -it \\ --device nvidia.com/gpu=all \\ --security-opt=label=disable \\ --shm-size=4GB -p 8000:8000 \\ --env \"HUGGING_FACE_HUB_TOKEN=$HF_TOKEN\" \\ --env \"HF_HUB_OFFLINE=0\" \\ --env=VLLM_NO_USAGE_STATS=1 \\ -v ./rhaiis-cache:/opt/app-root/src/.cache \\ registry.redhat.io/rhaiis/vllm-cuda-rhel9:3.2.0 \\ --model RedHatAI/Llama-3.2-1B-Instruct-FP8 Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output ValueError: Unrecognized model in RedHatAI/Llama-3.2-1B-Instruct-FP8. Should have a model_type key in its config.json ValueError: Unrecognized model in RedHatAI/Llama-3.2-1B-Instruct-FP8. Should have a model_type key in its config.json Copy to Clipboard Copied! Toggle word wrap Toggle overflow To resolve this error, pass --userns=keep-id:uid=1001 as a Podman parameter to ensure that the container runs with the root user.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/108",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Sometimes when Red Hat AI Inference Server downloads the model, the download fails or gets stuck. To prevent the model download from hanging, first download the model using the huggingface-cli. For example: huggingface-cli download <MODEL_ID> --local-dir <DOWNLOAD_PATH> $ huggingface-cli download <MODEL_ID> --local-dir <DOWNLOAD_PATH> Copy to Clipboard Copied! Toggle word wrap Toggle overflow When serving the model, pass the local model path to vLLM to prevent the model from being downloaded again.",
      "text": "Sometimes when Red Hat AI Inference Server downloads the model, the download fails or gets stuck. To prevent the model download from hanging, first download the model using the huggingface-cli. For example: huggingface-cli download <MODEL_ID> --local-dir <DOWNLOAD_PATH> $ huggingface-cli download <MODEL_ID> --local-dir <DOWNLOAD_PATH> Copy to Clipboard Copied! Toggle word wrap Toggle overflow When serving the model, pass the local model path to vLLM to prevent the model from being downloaded again.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/109",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "When Red Hat AI Inference Server loads a model from disk, the process sometimes hangs. Large models consume memory, and if memory runs low, the system slows down as it swaps data between RAM and disk. Slow network file system speeds or a lack of available memory can trigger excessive swapping. This can happen in clusters where file systems are shared between cluster nodes. Where possible, store the model in a local disk to prevent slow down during model loading. Ensure that the system has sufficient CPU memory available. Ensure that your system has enough CPU capacity to handle the model.",
      "text": "When Red Hat AI Inference Server loads a model from disk, the process sometimes hangs. Large models consume memory, and if memory runs low, the system slows down as it swaps data between RAM and disk. Slow network file system speeds or a lack of available memory can trigger excessive swapping. This can happen in clusters where file systems are shared between cluster nodes. Where possible, store the model in a local disk to prevent slow down during model loading. Ensure that the system has sufficient CPU memory available. Ensure that your system has enough CPU capacity to handle the model.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/110",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Sometimes, Red Hat AI Inference Server fails to inspect the model. Errors are reported in the log. For example: #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] failed to be inspected. Please check the logs for more details. #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] failed to be inspected. Please check the logs for more details. Copy to Clipboard Copied! Toggle word wrap Toggle overflow The error occurs when vLLM fails to import the model file, which is usually related to missing dependencies or outdated binaries in the vLLM build.",
      "text": "Sometimes, Red Hat AI Inference Server fails to inspect the model. Errors are reported in the log. For example: #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] failed to be inspected. Please check the logs for more details. #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] failed to be inspected. Please check the logs for more details. Copy to Clipboard Copied! Toggle word wrap Toggle overflow The error occurs when vLLM fails to import the model file, which is usually related to missing dependencies or outdated binaries in the vLLM build.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/111",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Some model architectures are not supported. Refer to the list of Validated models. For example, the following errors indicate that the model you are trying to use is not supported: Traceback (most recent call last): #... File \"vllm/model_executor/models/registry.py\", line xxx, in inspect_model_cls for arch in architectures: TypeError: 'NoneType' object is not iterable Traceback (most recent call last): #... File \"vllm/model_executor/models/registry.py\", line xxx, in inspect_model_cls for arch in architectures: TypeError: 'NoneType' object is not iterable Copy to Clipboard Copied! Toggle word wrap Toggle overflow #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] are not supported for now. Supported architectures: #... #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] are not supported for now. Supported architectures: #... Copy to Clipboard Copied! Toggle word wrap Toggle overflow Note Some architectures such as DeepSeekV2VL require the architecture to be explicitly specified using the --hf_overrides flag, for example: --hf_overrides '{\\\"architectures\\\": [\\\"DeepseekVLV2ForCausalLM\\\"]} --hf_overrides '{\\\"architectures\\\": [\\\"DeepseekVLV2ForCausalLM\\\"]} Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "Some model architectures are not supported. Refer to the list of Validated models. For example, the following errors indicate that the model you are trying to use is not supported: Traceback (most recent call last): #... File \"vllm/model_executor/models/registry.py\", line xxx, in inspect_model_cls for arch in architectures: TypeError: 'NoneType' object is not iterable Traceback (most recent call last): #... File \"vllm/model_executor/models/registry.py\", line xxx, in inspect_model_cls for arch in architectures: TypeError: 'NoneType' object is not iterable Copy to Clipboard Copied! Toggle word wrap Toggle overflow #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] are not supported for now. Supported architectures: #... #... File \"vllm/model_executor/models/registry.py\", line xxx, in \\_raise_for_unsupported raise ValueError( ValueError: Model architectures [''] are not supported for now. Supported architectures: #... Copy to Clipboard Copied! Toggle word wrap Toggle overflow Note Some architectures such as DeepSeekV2VL require the architecture to be explicitly specified using the --hf_overrides flag, for example: --hf_overrides '{\\\"architectures\\\": [\\\"DeepseekVLV2ForCausalLM\\\"]} --hf_overrides '{\\\"architectures\\\": [\\\"DeepseekVLV2ForCausalLM\\\"]} Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/112",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Sometimes a runtime error occurs for certain hardware when you load 8-bit floating point (FP8) models. FP8 requires GPU hardware acceleration. Errors occur when you load FP8 models like deepseek-r1 or models tagged with the F8_E4M3 tensor type. For example: triton.compiler.errors.CompilationError: at 1:0: def \\_per_token_group_quant_fp8( \\^ ValueError(\"type fp8e4nv not supported in this architecture. The supported fp8 dtypes are ('fp8e4b15', 'fp8e5')\") [rank0]:[W502 11:12:56.323757996 ProcessGroupNCCL.cpp:1496] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator()) triton.compiler.errors.CompilationError: at 1:0: def \\_per_token_group_quant_fp8( \\^ ValueError(\"type fp8e4nv not supported in this architecture. The supported fp8 dtypes are ('fp8e4b15', 'fp8e5')\") [rank0]:[W502 11:12:56.323757996 ProcessGroupNCCL.cpp:1496] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator()) Copy to Clipboard Copied! Toggle word wrap Toggle overflow Note Review Getting started to ensure your specific accelerator is supported. Accelerators that are currently supported for FP8 models include: NVIDIA CUDA T4, A100, L4, L40S, H100, and H200 GPUs AMD ROCm MI300X GPUs",
      "text": "Sometimes a runtime error occurs for certain hardware when you load 8-bit floating point (FP8) models. FP8 requires GPU hardware acceleration. Errors occur when you load FP8 models like deepseek-r1 or models tagged with the F8_E4M3 tensor type. For example: triton.compiler.errors.CompilationError: at 1:0: def \\_per_token_group_quant_fp8( \\^ ValueError(\"type fp8e4nv not supported in this architecture. The supported fp8 dtypes are ('fp8e4b15', 'fp8e5')\") [rank0]:[W502 11:12:56.323757996 ProcessGroupNCCL.cpp:1496] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator()) triton.compiler.errors.CompilationError: at 1:0: def \\_per_token_group_quant_fp8( \\^ ValueError(\"type fp8e4nv not supported in this architecture. The supported fp8 dtypes are ('fp8e4b15', 'fp8e5')\") [rank0]:[W502 11:12:56.323757996 ProcessGroupNCCL.cpp:1496] Warning: WARNING: destroy_process_group() was not called before program exit, which can leak resources. For more info, please see https://pytorch.org/docs/stable/distributed.html#shutdown (function operator()) Copy to Clipboard Copied! Toggle word wrap Toggle overflow Note Review Getting started to ensure your specific accelerator is supported. Accelerators that are currently supported for FP8 models include: NVIDIA CUDA T4, A100, L4, L40S, H100, and H200 GPUs AMD ROCm MI300X GPUs",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/113",
      "parent": {
        "$ref": "#/groups/13"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Sometimes when serving a model a runtime error occurs that is related to the host system. For example, you might see errors in the log like this: INFO 05-07 19:15:17 [config.py:1901] Chunked prefill is enabled with max_num_batched_tokens=2048. OMP: Error #179: Function Can't open SHM failed: OMP: System error #0: Success Traceback (most recent call last): File \"/opt/app-root/bin/vllm\", line 8, in <module> sys.exit(main()) .......................... raise RuntimeError(\"Engine core initialization failed. \" RuntimeError: Engine core initialization failed. See root cause above. INFO 05-07 19:15:17 [config.py:1901] Chunked prefill is enabled with max_num_batched_tokens=2048. OMP: Error #179: Function Can't open SHM failed: OMP: System error #0: Success Traceback (most recent call last): File \"/opt/app-root/bin/vllm\", line 8, in <module> sys.exit(main()) .......................... raise RuntimeError(\"Engine core initialization failed. \" RuntimeError: Engine core initialization failed. See root cause above. Copy to Clipboard Copied! Toggle word wrap Toggle overflow You can work around this issue by passing the --shm-size=2g argument when starting vllm.",
      "text": "Sometimes when serving a model a runtime error occurs that is related to the host system. For example, you might see errors in the log like this: INFO 05-07 19:15:17 [config.py:1901] Chunked prefill is enabled with max_num_batched_tokens=2048. OMP: Error #179: Function Can't open SHM failed: OMP: System error #0: Success Traceback (most recent call last): File \"/opt/app-root/bin/vllm\", line 8, in <module> sys.exit(main()) .......................... raise RuntimeError(\"Engine core initialization failed. \" RuntimeError: Engine core initialization failed. See root cause above. INFO 05-07 19:15:17 [config.py:1901] Chunked prefill is enabled with max_num_batched_tokens=2048. OMP: Error #179: Function Can't open SHM failed: OMP: System error #0: Success Traceback (most recent call last): File \"/opt/app-root/bin/vllm\", line 8, in <module> sys.exit(main()) .......................... raise RuntimeError(\"Engine core initialization failed. \" RuntimeError: Engine core initialization failed. See root cause above. Copy to Clipboard Copied! Toggle word wrap Toggle overflow You can work around this issue by passing the --shm-size=2g argument when starting vllm.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/114",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/14"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.2.\u00a0Memory optimization Copy link Link copied to clipboard!",
      "text": "5.2. Memory optimization Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/115",
      "parent": {
        "$ref": "#/groups/14"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "If the model is too large to run with a single GPU, you will get out-of-memory (OOM) errors. Use memory optimization options such as quantization, tensor parallelism, or reduced precision to reduce the memory consumption. For more information, see Conserving memory.",
      "text": "If the model is too large to run with a single GPU, you will get out-of-memory (OOM) errors. Use memory optimization options such as quantization, tensor parallelism, or reduced precision to reduce the memory consumption. For more information, see Conserving memory.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/116",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/15"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.3.\u00a0Generated model response quality Copy link Link copied to clipboard!",
      "text": "5.3. Generated model response quality Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/117",
      "parent": {
        "$ref": "#/groups/15"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "In some scenarios, the quality of the generated model responses might deteriorate after an update. Default sampling parameters source have been updated in newer versions. For vLLM version 0.8.4 and higher, the default sampling parameters come from the generation_config.json file that is provided by the model creator. In most cases, this should lead to higher quality responses, because the model creator is likely to know which sampling parameters are best for their model. However, in some cases the defaults provided by the model creator can lead to degraded performance. If you experience this problem, try serving the model with the old defaults by using the --generation-config vllm server argument. Important If applying the --generation-config vllm server argument improves the model output, continue to use the vLLM defaults and petition the model creator on Hugging Face to update their default generation_config.json so that it produces better quality generations.",
      "text": "In some scenarios, the quality of the generated model responses might deteriorate after an update. Default sampling parameters source have been updated in newer versions. For vLLM version 0.8.4 and higher, the default sampling parameters come from the generation_config.json file that is provided by the model creator. In most cases, this should lead to higher quality responses, because the model creator is likely to know which sampling parameters are best for their model. However, in some cases the defaults provided by the model creator can lead to degraded performance. If you experience this problem, try serving the model with the old defaults by using the --generation-config vllm server argument. Important If applying the --generation-config vllm server argument improves the model output, continue to use the vLLM defaults and petition the model creator on Hugging Face to update their default generation_config.json so that it produces better quality generations.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/118",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/16"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.4.\u00a0CUDA accelerator errors Copy link Link copied to clipboard!",
      "text": "5.4. CUDA accelerator errors Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/119",
      "parent": {
        "$ref": "#/groups/16"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You might experience a self.graph.replay() error when running a model using CUDA accelerators. If vLLM crashes and the error trace captures the error somewhere around the self.graph.replay() method in the vllm/worker/model_runner.py module, this is most likely a CUDA error that occurs inside the CUDAGraph class. To identify the particular CUDA operation that causes the error, add the --enforce-eager server argument to the vllm command line to disable CUDAGraph optimization and isolate the problematic CUDA operation.",
      "text": "You might experience a self.graph.replay() error when running a model using CUDA accelerators. If vLLM crashes and the error trace captures the error somewhere around the self.graph.replay() method in the vllm/worker/model_runner.py module, this is most likely a CUDA error that occurs inside the CUDAGraph class. To identify the particular CUDA operation that causes the error, add the --enforce-eager server argument to the vllm command line to disable CUDAGraph optimization and isolate the problematic CUDA operation.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/120",
      "parent": {
        "$ref": "#/groups/16"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You might experience accelerator and CPU communication problems that are caused by incorrect hardware or driver settings. NVIDIA Fabric Manager is required for multi-GPU systems for some types of NVIDIA GPUs. The nvidia-fabricmanager package and associated systemd service might not be installed or the package might not be running. Run the diagnostic Python script to check whether the NVIDIA Collective Communications Library (NCCL) and Gloo library components are communicating correctly. On an NVIDIA system, check the fabric manager status by running the following command: systemctl status nvidia-fabricmanager $ systemctl status nvidia-fabricmanager Copy to Clipboard Copied! Toggle word wrap Toggle overflow On successfully configured systems, the service should be active and running with no errors.",
      "text": "You might experience accelerator and CPU communication problems that are caused by incorrect hardware or driver settings. NVIDIA Fabric Manager is required for multi-GPU systems for some types of NVIDIA GPUs. The nvidia-fabricmanager package and associated systemd service might not be installed or the package might not be running. Run the diagnostic Python script to check whether the NVIDIA Collective Communications Library (NCCL) and Gloo library components are communicating correctly. On an NVIDIA system, check the fabric manager status by running the following command: systemctl status nvidia-fabricmanager $ systemctl status nvidia-fabricmanager Copy to Clipboard Copied! Toggle word wrap Toggle overflow On successfully configured systems, the service should be active and running with no errors.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/121",
      "parent": {
        "$ref": "#/groups/16"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Running vLLM with tensor parallelism enabled and setting --tensor-parallel-size to be greater than 1 on NVIDIA Multi-Instance GPU (MIG) hardware causes an AssertionError during the initial model loading or shape checking phase. This typically occurs as one of the first errors when starting vLLM.",
      "text": "Running vLLM with tensor parallelism enabled and setting --tensor-parallel-size to be greater than 1 on NVIDIA Multi-Instance GPU (MIG) hardware causes an AssertionError during the initial model loading or shape checking phase. This typically occurs as one of the first errors when starting vLLM.",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/122",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/17"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.5.\u00a0Networking errors Copy link Link copied to clipboard!",
      "text": "5.5. Networking errors Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/123",
      "parent": {
        "$ref": "#/groups/17"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You might experience network errors with complicated network configurations. To troubleshoot network issues, search the logs for DEBUG statements where an incorrect IP address is listed, for example: DEBUG 06-10 21:32:17 parallel_state.py:88] world_size=8 rank=0 local_rank=0 distributed_init_method=tcp://<incorrect_ip_address>:54641 backend=nccl DEBUG 06-10 21:32:17 parallel_state.py:88] world_size=8 rank=0 local_rank=0 distributed_init_method=tcp://<incorrect_ip_address>:54641 backend=nccl Copy to Clipboard Copied! Toggle word wrap Toggle overflow To correct the issue, set the correct IP address with the VLLM_HOST_IP environment variable, for example: export VLLM_HOST_IP=<correct_ip_address> $ export VLLM_HOST_IP=<correct_ip_address> Copy to Clipboard Copied! Toggle word wrap Toggle overflow Specify the network interface that is tied to the IP address for NCCL and Gloo: export NCCL_SOCKET_IFNAME=<your_network_interface> $ export NCCL_SOCKET_IFNAME=<your_network_interface> Copy to Clipboard Copied! Toggle word wrap Toggle overflow export GLOO_SOCKET_IFNAME=<your_network_interface> $ export GLOO_SOCKET_IFNAME=<your_network_interface> Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "You might experience network errors with complicated network configurations. To troubleshoot network issues, search the logs for DEBUG statements where an incorrect IP address is listed, for example: DEBUG 06-10 21:32:17 parallel_state.py:88] world_size=8 rank=0 local_rank=0 distributed_init_method=tcp://<incorrect_ip_address>:54641 backend=nccl DEBUG 06-10 21:32:17 parallel_state.py:88] world_size=8 rank=0 local_rank=0 distributed_init_method=tcp://<incorrect_ip_address>:54641 backend=nccl Copy to Clipboard Copied! Toggle word wrap Toggle overflow To correct the issue, set the correct IP address with the VLLM_HOST_IP environment variable, for example: export VLLM_HOST_IP=<correct_ip_address> $ export VLLM_HOST_IP=<correct_ip_address> Copy to Clipboard Copied! Toggle word wrap Toggle overflow Specify the network interface that is tied to the IP address for NCCL and Gloo: export NCCL_SOCKET_IFNAME=<your_network_interface> $ export NCCL_SOCKET_IFNAME=<your_network_interface> Copy to Clipboard Copied! Toggle word wrap Toggle overflow export GLOO_SOCKET_IFNAME=<your_network_interface> $ export GLOO_SOCKET_IFNAME=<your_network_interface> Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/124",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/18"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.6.\u00a0Python multiprocessing errors Copy link Link copied to clipboard!",
      "text": "5.6. Python multiprocessing errors Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/125",
      "parent": {
        "$ref": "#/groups/18"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "You might experience Python multiprocessing warnings or runtime errors. This can be caused by code that is not properly structured for Python multiprocessing. The following is an example console warning: WARNING 12-11 14:50:37 multiproc_worker_utils.py:281] CUDA was previously initialized. We must use the `spawn` multiprocessing start method. Setting VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/getting_started/troubleshooting.html#python-multiprocessing for more information. WARNING 12-11 14:50:37 multiproc_worker_utils.py:281] CUDA was previously initialized. We must use the `spawn` multiprocessing start method. Setting VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/getting_started/troubleshooting.html#python-multiprocessing for more information. Copy to Clipboard Copied! Toggle word wrap Toggle overflow The following is an example Python runtime error: RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase. This probably means that you are not using fork to start your child processes and you have forgotten to use the proper idiom in the main module: if __name__ = \"__main__\": freeze_support() ... The \"freeze_support()\" line can be omitted if the program is not going to be frozen to produce an executable. To fix this issue, refer to the \"Safe importing of main module\" section in https://docs.python.org/3/library/multiprocessing.html RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase. This probably means that you are not using fork to start your child processes and you have forgotten to use the proper idiom in the main module: if __name__ = \"__main__\": freeze_support() ... The \"freeze_support()\" line can be omitted if the program is not going to be frozen to produce an executable. To fix this issue, refer to the \"Safe importing of main module\" section in https://docs.python.org/3/library/multiprocessing.html Copy to Clipboard Copied! Toggle word wrap Toggle overflow To resolve the runtime error, update your Python code to guard the usage of vllm behind an if__name__ = \"__main__\": block, for example: if __name__ = \"__main__\": import vllm llm = vllm.LLM(...) if __name__ = \"__main__\": import vllm llm = vllm.LLM(...) Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "You might experience Python multiprocessing warnings or runtime errors. This can be caused by code that is not properly structured for Python multiprocessing. The following is an example console warning: WARNING 12-11 14:50:37 multiproc_worker_utils.py:281] CUDA was previously initialized. We must use the `spawn` multiprocessing start method. Setting VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/getting_started/troubleshooting.html#python-multiprocessing for more information. WARNING 12-11 14:50:37 multiproc_worker_utils.py:281] CUDA was previously initialized. We must use the `spawn` multiprocessing start method. Setting VLLM_WORKER_MULTIPROC_METHOD to 'spawn'. See https://docs.vllm.ai/en/latest/getting_started/troubleshooting.html#python-multiprocessing for more information. Copy to Clipboard Copied! Toggle word wrap Toggle overflow The following is an example Python runtime error: RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase. This probably means that you are not using fork to start your child processes and you have forgotten to use the proper idiom in the main module: if __name__ = \"__main__\": freeze_support() ... The \"freeze_support()\" line can be omitted if the program is not going to be frozen to produce an executable. To fix this issue, refer to the \"Safe importing of main module\" section in https://docs.python.org/3/library/multiprocessing.html RuntimeError: An attempt has been made to start a new process before the current process has finished its bootstrapping phase. This probably means that you are not using fork to start your child processes and you have forgotten to use the proper idiom in the main module: if __name__ = \"__main__\": freeze_support() ... The \"freeze_support()\" line can be omitted if the program is not going to be frozen to produce an executable. To fix this issue, refer to the \"Safe importing of main module\" section in https://docs.python.org/3/library/multiprocessing.html Copy to Clipboard Copied! Toggle word wrap Toggle overflow To resolve the runtime error, update your Python code to guard the usage of vllm behind an if__name__ = \"__main__\": block, for example: if __name__ = \"__main__\": import vllm llm = vllm.LLM(...) if __name__ = \"__main__\": import vllm llm = vllm.LLM(...) Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/126",
      "parent": {
        "$ref": "#/texts/95"
      },
      "children": [
        {
          "$ref": "#/groups/19"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "5.7.\u00a0GPU driver or device pass-through issues Copy link Link copied to clipboard!",
      "text": "5.7. GPU driver or device pass-through issues Copy link Link copied to clipboard!",
      "level": 2
    },
    {
      "self_ref": "#/texts/127",
      "parent": {
        "$ref": "#/groups/19"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "When you run the Red Hat AI Inference Server container image, sometimes it is unclear whether device pass-through errors are being caused by GPU drivers or tools such as the NVIDIA Container Toolkit. Check that the NVIDIA Container toolkit that is installed on the host machine can see the host GPUs: nvidia-ctk cdi list $ nvidia-ctk cdi list Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output #... nvidia.com/gpu=GPU-0fe9bb20-207e-90bf-71a7-677e4627d9a1 nvidia.com/gpu=GPU-10eff114-f824-a804-e7b7-e07e3f8ebc26 nvidia.com/gpu=GPU-39af96b4-f115-9b6d-5be9-68af3abd0e52 nvidia.com/gpu=GPU-3a711e90-a1c5-3d32-a2cd-0abeaa3df073 nvidia.com/gpu=GPU-6f5f6d46-3fc1-8266-5baf-582a4de11937 nvidia.com/gpu=GPU-da30e69a-7ba3-dc81-8a8b-e9b3c30aa593 nvidia.com/gpu=GPU-dc3c1c36-841b-bb2e-4481-381f614e6667 nvidia.com/gpu=GPU-e85ffe36-1642-47c2-644e-76f8a0f02ba7 nvidia.com/gpu=all #... nvidia.com/gpu=GPU-0fe9bb20-207e-90bf-71a7-677e4627d9a1 nvidia.com/gpu=GPU-10eff114-f824-a804-e7b7-e07e3f8ebc26 nvidia.com/gpu=GPU-39af96b4-f115-9b6d-5be9-68af3abd0e52 nvidia.com/gpu=GPU-3a711e90-a1c5-3d32-a2cd-0abeaa3df073 nvidia.com/gpu=GPU-6f5f6d46-3fc1-8266-5baf-582a4de11937 nvidia.com/gpu=GPU-da30e69a-7ba3-dc81-8a8b-e9b3c30aa593 nvidia.com/gpu=GPU-dc3c1c36-841b-bb2e-4481-381f614e6667 nvidia.com/gpu=GPU-e85ffe36-1642-47c2-644e-76f8a0f02ba7 nvidia.com/gpu=all Copy to Clipboard Copied! Toggle word wrap Toggle overflow Ensure that the NVIDIA accelerator configuration has been created on the host machine: sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml $ sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml Copy to Clipboard Copied! Toggle word wrap Toggle overflow Check that the Red Hat AI Inference Server container can access NVIDIA GPUs on the host by running the following command: podman run --rm -it --security-opt=label=disable --device nvidia.com/gpu=all nvcr.io/nvidia/cuda:12.4.1-base-ubi9 nvidia-smi $ podman run --rm -it --security-opt=label=disable --device nvidia.com/gpu=all nvcr.io/nvidia/cuda:12.4.1-base-ubi9 nvidia-smi Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "text": "When you run the Red Hat AI Inference Server container image, sometimes it is unclear whether device pass-through errors are being caused by GPU drivers or tools such as the NVIDIA Container Toolkit. Check that the NVIDIA Container toolkit that is installed on the host machine can see the host GPUs: nvidia-ctk cdi list $ nvidia-ctk cdi list Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output #... nvidia.com/gpu=GPU-0fe9bb20-207e-90bf-71a7-677e4627d9a1 nvidia.com/gpu=GPU-10eff114-f824-a804-e7b7-e07e3f8ebc26 nvidia.com/gpu=GPU-39af96b4-f115-9b6d-5be9-68af3abd0e52 nvidia.com/gpu=GPU-3a711e90-a1c5-3d32-a2cd-0abeaa3df073 nvidia.com/gpu=GPU-6f5f6d46-3fc1-8266-5baf-582a4de11937 nvidia.com/gpu=GPU-da30e69a-7ba3-dc81-8a8b-e9b3c30aa593 nvidia.com/gpu=GPU-dc3c1c36-841b-bb2e-4481-381f614e6667 nvidia.com/gpu=GPU-e85ffe36-1642-47c2-644e-76f8a0f02ba7 nvidia.com/gpu=all #... nvidia.com/gpu=GPU-0fe9bb20-207e-90bf-71a7-677e4627d9a1 nvidia.com/gpu=GPU-10eff114-f824-a804-e7b7-e07e3f8ebc26 nvidia.com/gpu=GPU-39af96b4-f115-9b6d-5be9-68af3abd0e52 nvidia.com/gpu=GPU-3a711e90-a1c5-3d32-a2cd-0abeaa3df073 nvidia.com/gpu=GPU-6f5f6d46-3fc1-8266-5baf-582a4de11937 nvidia.com/gpu=GPU-da30e69a-7ba3-dc81-8a8b-e9b3c30aa593 nvidia.com/gpu=GPU-dc3c1c36-841b-bb2e-4481-381f614e6667 nvidia.com/gpu=GPU-e85ffe36-1642-47c2-644e-76f8a0f02ba7 nvidia.com/gpu=all Copy to Clipboard Copied! Toggle word wrap Toggle overflow Ensure that the NVIDIA accelerator configuration has been created on the host machine: sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml $ sudo nvidia-ctk cdi generate --output=/etc/cdi/nvidia.yaml Copy to Clipboard Copied! Toggle word wrap Toggle overflow Check that the Red Hat AI Inference Server container can access NVIDIA GPUs on the host by running the following command: podman run --rm -it --security-opt=label=disable --device nvidia.com/gpu=all nvcr.io/nvidia/cuda:12.4.1-base-ubi9 nvidia-smi $ podman run --rm -it --security-opt=label=disable --device nvidia.com/gpu=all nvcr.io/nvidia/cuda:12.4.1-base-ubi9 nvidia-smi Copy to Clipboard Copied! Toggle word wrap Toggle overflow Example output +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ +-----------------------------------------------------------------------------------------+ | NVIDIA-SMI 570.124.06 Driver Version: 570.124.06 CUDA Version: 12.8 | |-----------------------------------------+------------------------+----------------------+ | GPU Name Persistence-M | Bus-Id Disp.A | Volatile Uncorr. ECC | | Fan Temp Perf Pwr:Usage/Cap | Memory-Usage | GPU-Util Compute M. | | | | MIG M. | |=========================================+========================+======================| | 0 NVIDIA A100-SXM4-80GB Off | 00000000:08:01.0 Off | 0 | | N/A 32C P0 64W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ | 1 NVIDIA A100-SXM4-80GB Off | 00000000:08:02.0 Off | 0 | | N/A 29C P0 63W / 400W | 1MiB / 81920MiB | 0% Default | | | | Disabled | +-----------------------------------------+------------------------+----------------------+ +-----------------------------------------------------------------------------------------+ | Processes: | | GPU GI CI PID Type Process name GPU Memory | | ID ID Usage | |=========================================================================================| | No running processes found | +-----------------------------------------------------------------------------------------+ Copy to Clipboard Copied! Toggle word wrap Toggle overflow",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/128",
      "parent": {
        "$ref": "#/texts/31"
      },
      "children": [
        {
          "$ref": "#/texts/129"
        },
        {
          "$ref": "#/texts/130"
        },
        {
          "$ref": "#/texts/131"
        },
        {
          "$ref": "#/texts/132"
        },
        {
          "$ref": "#/texts/133"
        },
        {
          "$ref": "#/texts/134"
        },
        {
          "$ref": "#/texts/135"
        },
        {
          "$ref": "#/texts/136"
        },
        {
          "$ref": "#/texts/137"
        },
        {
          "$ref": "#/texts/138"
        },
        {
          "$ref": "#/texts/139"
        },
        {
          "$ref": "#/texts/140"
        },
        {
          "$ref": "#/texts/141"
        },
        {
          "$ref": "#/texts/142"
        },
        {
          "$ref": "#/texts/143"
        },
        {
          "$ref": "#/texts/150"
        },
        {
          "$ref": "#/texts/155"
        },
        {
          "$ref": "#/texts/159"
        },
        {
          "$ref": "#/texts/161"
        },
        {
          "$ref": "#/texts/163"
        },
        {
          "$ref": "#/texts/165"
        },
        {
          "$ref": "#/texts/166"
        },
        {
          "$ref": "#/texts/177"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Legal Notice Copy link Link copied to clipboard!",
      "text": "Legal Notice Copy link Link copied to clipboard!",
      "level": 1
    },
    {
      "self_ref": "#/texts/129",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Copyright \u00a9 2025 Red Hat, Inc.",
      "text": "Copyright \u00a9 2025 Red Hat, Inc."
    },
    {
      "self_ref": "#/texts/130",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "The text of and illustrations in this document are licensed by Red Hat under a Creative Commons Attribution\u2013Share Alike 3.0 Unported license (\"CC-BY-SA\"). An explanation of CC-BY-SA is available at http://creativecommons.org/licenses/by-sa/3.0/. In accordance with CC-BY-SA, if you distribute this document or an adaptation of it, you must provide the URL for the original version.",
      "text": "The text of and illustrations in this document are licensed by Red Hat under a Creative Commons Attribution-Share Alike 3.0 Unported license (\"CC-BY-SA\"). An explanation of CC-BY-SA is available at http://creativecommons.org/licenses/by-sa/3.0/. In accordance with CC-BY-SA, if you distribute this document or an adaptation of it, you must provide the URL for the original version."
    },
    {
      "self_ref": "#/texts/131",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red Hat, as the licensor of this document, waives the right to enforce, and agrees not to assert, Section 4d of CC-BY-SA to the fullest extent permitted by applicable law.",
      "text": "Red Hat, as the licensor of this document, waives the right to enforce, and agrees not to assert, Section 4d of CC-BY-SA to the fullest extent permitted by applicable law."
    },
    {
      "self_ref": "#/texts/132",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red Hat, Red Hat Enterprise Linux, the Shadowman logo, the Red Hat logo, JBoss, OpenShift, Fedora, the Infinity logo, and RHCE are trademarks of Red Hat, Inc., registered in the United States and other countries.",
      "text": "Red Hat, Red Hat Enterprise Linux, the Shadowman logo, the Red Hat logo, JBoss, OpenShift, Fedora, the Infinity logo, and RHCE are trademarks of Red Hat, Inc., registered in the United States and other countries."
    },
    {
      "self_ref": "#/texts/133",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Linux\u00ae is the registered trademark of Linus Torvalds in the United States and other countries.",
      "text": "Linux\u00ae is the registered trademark of Linus Torvalds in the United States and other countries."
    },
    {
      "self_ref": "#/texts/134",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Java\u00ae is a registered trademark of Oracle and/or its affiliates.",
      "text": "Java\u00ae is a registered trademark of Oracle and/or its affiliates."
    },
    {
      "self_ref": "#/texts/135",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "XFS\u00ae is a trademark of Silicon Graphics International Corp. or its subsidiaries in the United States and/or other countries.",
      "text": "XFS\u00ae is a trademark of Silicon Graphics International Corp. or its subsidiaries in the United States and/or other countries."
    },
    {
      "self_ref": "#/texts/136",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "MySQL\u00ae is a registered trademark of MySQL AB in the United States, the European Union and other countries.",
      "text": "MySQL\u00ae is a registered trademark of MySQL AB in the United States, the European Union and other countries."
    },
    {
      "self_ref": "#/texts/137",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Node.js\u00ae is an official trademark of Joyent. Red Hat is not formally related to or endorsed by the official Joyent Node.js open source or commercial project.",
      "text": "Node.js\u00ae is an official trademark of Joyent. Red Hat is not formally related to or endorsed by the official Joyent Node.js open source or commercial project."
    },
    {
      "self_ref": "#/texts/138",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "The OpenStack\u00ae Word Mark and OpenStack logo are either registered trademarks/service marks or trademarks/service marks of the OpenStack Foundation, in the United States and other countries and are used with the OpenStack Foundation's permission. We are not affiliated with, endorsed or sponsored by the OpenStack Foundation, or the OpenStack community.",
      "text": "The OpenStack\u00ae Word Mark and OpenStack logo are either registered trademarks/service marks or trademarks/service marks of the OpenStack Foundation, in the United States and other countries and are used with the OpenStack Foundation's permission. We are not affiliated with, endorsed or sponsored by the OpenStack Foundation, or the OpenStack community."
    },
    {
      "self_ref": "#/texts/139",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "All other trademarks are the property of their respective owners.",
      "text": "All other trademarks are the property of their respective owners."
    },
    {
      "self_ref": "#/texts/140",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "FormatMulti-pageSingle-pageView full doc as PDF",
      "text": "FormatMulti-pageSingle-pageView full doc as PDF"
    },
    {
      "self_ref": "#/texts/141",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Back to top",
      "text": "Back to top"
    },
    {
      "self_ref": "#/texts/142",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "GithubYoutubeTwitter",
      "text": "GithubYoutubeTwitter"
    },
    {
      "self_ref": "#/texts/143",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/groups/20"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Learn",
      "text": "Learn",
      "level": 2
    },
    {
      "self_ref": "#/texts/144",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Developer resources",
      "text": "Developer resources",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/145",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Cloud learning hub",
      "text": "Cloud learning hub",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/146",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Interactive labs",
      "text": "Interactive labs",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/147",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Training and certification",
      "text": "Training and certification",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/148",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Customer support",
      "text": "Customer support",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/149",
      "parent": {
        "$ref": "#/groups/20"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "See all documentation",
      "text": "See all documentation",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/150",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/groups/21"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Try, buy, & sell",
      "text": "Try, buy, & sell",
      "level": 2
    },
    {
      "self_ref": "#/texts/151",
      "parent": {
        "$ref": "#/groups/21"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Product trial center",
      "text": "Product trial center",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/152",
      "parent": {
        "$ref": "#/groups/21"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Red Hat Ecosystem Catalog",
      "text": "Red Hat Ecosystem Catalog",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/153",
      "parent": {
        "$ref": "#/groups/21"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Red Hat Store",
      "text": "Red Hat Store",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/154",
      "parent": {
        "$ref": "#/groups/21"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Buy online (Japan)",
      "text": "Buy online (Japan)",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/155",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/groups/22"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Communities",
      "text": "Communities",
      "level": 2
    },
    {
      "self_ref": "#/texts/156",
      "parent": {
        "$ref": "#/groups/22"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Customer Portal Community",
      "text": "Customer Portal Community",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/157",
      "parent": {
        "$ref": "#/groups/22"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Events",
      "text": "Events",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/158",
      "parent": {
        "$ref": "#/groups/22"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "How we contribute",
      "text": "How we contribute",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/159",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/texts/160"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "About Red\u00a0Hat Documentation",
      "text": "About Red Hat Documentation",
      "level": 2
    },
    {
      "self_ref": "#/texts/160",
      "parent": {
        "$ref": "#/texts/159"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "We help Red\u00a0Hat users innovate and achieve their goals with our products and services with content they can trust. Explore our recent updates.",
      "text": "We help Red Hat users innovate and achieve their goals with our products and services with content they can trust. Explore our recent updates."
    },
    {
      "self_ref": "#/texts/161",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/texts/162"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Making open source more inclusive",
      "text": "Making open source more inclusive",
      "level": 2
    },
    {
      "self_ref": "#/texts/162",
      "parent": {
        "$ref": "#/texts/161"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "Red\u00a0Hat is committed to replacing problematic language in our code, documentation, and web properties. For more details, see the Red\u00a0Hat Blog.",
      "text": "Red Hat is committed to replacing problematic language in our code, documentation, and web properties. For more details, see the Red Hat Blog."
    },
    {
      "self_ref": "#/texts/163",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/texts/164"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "About Red\u00a0Hat",
      "text": "About Red Hat",
      "level": 2
    },
    {
      "self_ref": "#/texts/164",
      "parent": {
        "$ref": "#/texts/163"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "We deliver hardened solutions that make it easier for enterprises to work across platforms and environments, from the core datacenter to the network edge.",
      "text": "We deliver hardened solutions that make it easier for enterprises to work across platforms and environments, from the core datacenter to the network edge."
    },
    {
      "self_ref": "#/texts/165",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Theme",
      "text": "Theme",
      "level": 2
    },
    {
      "self_ref": "#/texts/166",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/groups/23"
        },
        {
          "$ref": "#/texts/176"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Red\u00a0Hat legal and privacy links",
      "text": "Red Hat legal and privacy links",
      "level": 2
    },
    {
      "self_ref": "#/texts/167",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "About Red Hat",
      "text": "About Red Hat",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/168",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Jobs",
      "text": "Jobs",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/169",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Events",
      "text": "Events",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/170",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Locations",
      "text": "Locations",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/171",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Contact Red Hat",
      "text": "Contact Red Hat",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/172",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Red Hat Blog",
      "text": "Red Hat Blog",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/173",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Inclusion at Red Hat",
      "text": "Inclusion at Red Hat",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/174",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Cool Stuff Store",
      "text": "Cool Stuff Store",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/175",
      "parent": {
        "$ref": "#/groups/23"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Red Hat Summit",
      "text": "Red Hat Summit",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/176",
      "parent": {
        "$ref": "#/texts/166"
      },
      "children": [],
      "content_layer": "body",
      "label": "text",
      "prov": [],
      "orig": "\u00a9 2025 Red Hat",
      "text": "\u00a9 2025 Red Hat"
    },
    {
      "self_ref": "#/texts/177",
      "parent": {
        "$ref": "#/texts/128"
      },
      "children": [
        {
          "$ref": "#/groups/24"
        }
      ],
      "content_layer": "body",
      "label": "section_header",
      "prov": [],
      "orig": "Red\u00a0Hat legal and privacy links",
      "text": "Red Hat legal and privacy links",
      "level": 2
    },
    {
      "self_ref": "#/texts/178",
      "parent": {
        "$ref": "#/groups/24"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Privacy statement",
      "text": "Privacy statement",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/179",
      "parent": {
        "$ref": "#/groups/24"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Terms of use",
      "text": "Terms of use",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/180",
      "parent": {
        "$ref": "#/groups/24"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "All policies and guidelines",
      "text": "All policies and guidelines",
      "enumerated": false,
      "marker": ""
    },
    {
      "self_ref": "#/texts/181",
      "parent": {
        "$ref": "#/groups/24"
      },
      "children": [],
      "content_layer": "body",
      "label": "list_item",
      "prov": [],
      "orig": "Digital accessibility",
      "text": "Digital accessibility",
      "enumerated": false,
      "marker": ""
    }
  ],
  "pictures": [
    {
      "self_ref": "#/pictures/0",
      "parent": {
        "$ref": "#/groups/0"
      },
      "children": [],
      "content_layer": "furniture",
      "label": "picture",
      "prov": [],
      "captions": [
        {
          "$ref": "#/texts/3"
        }
      ],
      "references": [],
      "footnotes": [],
      "annotations": []
    }
  ],
  "tables": [
    {
      "self_ref": "#/tables/0",
      "parent": {
        "$ref": "#/texts/46"
      },
      "children": [],
      "content_layer": "body",
      "label": "table",
      "prov": [],
      "captions": [],
      "references": [],
      "footnotes": [],
      "data": {
        "table_cells": [
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 0,
            "end_row_offset_idx": 1,
            "start_col_offset_idx": 0,
            "end_col_offset_idx": 1,
            "text": "Product",
            "column_header": true,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 0,
            "end_row_offset_idx": 1,
            "start_col_offset_idx": 1,
            "end_col_offset_idx": 2,
            "text": "Supported version",
            "column_header": true,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 1,
            "end_row_offset_idx": 2,
            "start_col_offset_idx": 0,
            "end_col_offset_idx": 1,
            "text": "Red\u00a0Hat AI Inference Server",
            "column_header": false,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 1,
            "end_row_offset_idx": 2,
            "start_col_offset_idx": 1,
            "end_col_offset_idx": 2,
            "text": "3.2.0-1754088865-hotfix-1 (CUDA), 3.2 (ROCm)",
            "column_header": false,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 2,
            "end_row_offset_idx": 3,
            "start_col_offset_idx": 0,
            "end_col_offset_idx": 1,
            "text": "vLLM core",
            "column_header": false,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 2,
            "end_row_offset_idx": 3,
            "start_col_offset_idx": 1,
            "end_col_offset_idx": 2,
            "text": "v0.9.2",
            "column_header": false,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 3,
            "end_row_offset_idx": 4,
            "start_col_offset_idx": 0,
            "end_col_offset_idx": 1,
            "text": "LLM Compressor",
            "column_header": false,
            "row_header": false,
            "row_section": false
          },
          {
            "row_span": 1,
            "col_span": 1,
            "start_row_offset_idx": 3,
            "end_row_offset_idx": 4,
            "start_col_offset_idx": 1,
            "end_col_offset_idx": 2,
            "text": "LLM Compressor v0.6.0 is not included in the Red\u00a0Hat AI Inference Server 3.2.0-1754088865-hotfix-1 container image.",
            "column_header": false,
            "row_header": false,
            "row_section": false
          }
        ],
        "num_rows": 4,
        "num_cols": 2,
        "grid": [
          [
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 0,
              "end_row_offset_idx": 1,
              "start_col_offset_idx": 0,
              "end_col_offset_idx": 1,
              "text": "Product",
              "column_header": true,
              "row_header": false,
              "row_section": false
            },
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 0,
              "end_row_offset_idx": 1,
              "start_col_offset_idx": 1,
              "end_col_offset_idx": 2,
              "text": "Supported version",
              "column_header": true,
              "row_header": false,
              "row_section": false
            }
          ],
          [
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 1,
              "end_row_offset_idx": 2,
              "start_col_offset_idx": 0,
              "end_col_offset_idx": 1,
              "text": "Red\u00a0Hat AI Inference Server",
              "column_header": false,
              "row_header": false,
              "row_section": false
            },
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 1,
              "end_row_offset_idx": 2,
              "start_col_offset_idx": 1,
              "end_col_offset_idx": 2,
              "text": "3.2.0-1754088865-hotfix-1 (CUDA), 3.2 (ROCm)",
              "column_header": false,
              "row_header": false,
              "row_section": false
            }
          ],
          [
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 2,
              "end_row_offset_idx": 3,
              "start_col_offset_idx": 0,
              "end_col_offset_idx": 1,
              "text": "vLLM core",
              "column_header": false,
              "row_header": false,
              "row_section": false
            },
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 2,
              "end_row_offset_idx": 3,
              "start_col_offset_idx": 1,
              "end_col_offset_idx": 2,
              "text": "v0.9.2",
              "column_header": false,
              "row_header": false,
              "row_section": false
            }
          ],
          [
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 3,
              "end_row_offset_idx": 4,
              "start_col_offset_idx": 0,
              "end_col_offset_idx": 1,
              "text": "LLM Compressor",
              "column_header": false,
              "row_header": false,
              "row_section": false
            },
            {
              "row_span": 1,
              "col_span": 1,
              "start_row_offset_idx": 3,
              "end_row_offset_idx": 4,
              "start_col_offset_idx": 1,
              "end_col_offset_idx": 2,
              "text": "LLM Compressor v0.6.0 is not included in the Red\u00a0Hat AI Inference Server 3.2.0-1754088865-hotfix-1 container image.",
              "column_header": false,
              "row_header": false,
              "row_section": false
            }
          ]
        ]
      },
      "annotations": []
    }
  ],
  "key_value_items": [],
  "form_items": [],
  "pages": {}
}